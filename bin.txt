------------Diffieeee----
def main():
    p = int(input("Enter a prime number: "))
    g = int(input("Enter a generator number: "))
    x, y = map(int, input("Enter the sender's and receiver's secret key: ").split())

    print("Sender's part:")
    res11 = pow(g, x, p)
    print("Public key is", res11)

    print("Receiver's part:")
    res22 = pow(g, y, p)
    print("Public key is", res22)

    print("Public keys are exchanged.")

    ress11 = pow(res22, x, p)
    ress22 = pow(res11, y, p)

    if ress11 == ress22:
        print("The shared secret key is", ress11)
    else:
        print("Values don't match.")

    print("**** With man in the middle attack ****")

    x1, y1 = map(int, input("Enter the attacker's key: ").split())

    print("The attacker calculates this:")
    as11 = pow(g, x1, p)
    print("Fake sender's public key", as11)

    as22 = pow(g, y1, p)
    print("Fake receiver's public key", as22)

    print("Fake keys are exchanged.")

    aas11 = pow(as22, x, p)
    aas22 = pow(as11, y, p)

    if aas22 == aas11:
        print("Values match.")
    else:
        print("An attack has taken place. The values don't match. Values are:", aas11, aas22)


if _name_ == "_main_":
    main()


--------RSA---
#include <stdio.h>
#include <stdlib.h>

// Function to calculate gcd
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Function to calculate x^y % p
int power(int x, unsigned int y, int p) {
    int res = 1; // Initialize result
    x = x % p; // Update x if it is more than or equal to p
    while (y > 0) {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % p;
        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}

// Function to find modular inverse of a under modulo m
// This function assumes m is prime
int modInverse(int a, int m) {
    return power(a, m-2, m);
}

// Function to decrypt ciphertext using private key (d)
int decrypt(int ciphertext, int d, int n) {
    return power(ciphertext, d, n);
}

int main() {
    int p, q, n, phi, e, d;
    int plaintext, ciphertext;

    printf("Enter two distinct prime numbers p and q: ");
    scanf("%d %d", &p, &q);

    n = p * q;
    phi = (p - 1) * (q - 1);

    printf("Calculated n = %d and phi = %d\n", n, phi);

    // Select e
    printf("Choose an e from below (1 < e < %d, gcd(e, %d) must be 1):\n", phi, phi);
    for (e = 2; e < phi; e++) {
        if (gcd(e, phi) == 1)
            printf("%d ", e);
    }
    printf("\nEnter your choice for e: ");
    scanf("%d", &e);

    // Calculate d
    d = modInverse(e, phi);
    printf("Calculated d = %d\n", d);

    // Encrypt
    printf("Enter plaintext (a number): ");
    scanf("%d", &plaintext);
    ciphertext = power(plaintext, e, n);
    printf("Ciphertext: %d\n", ciphertext);

    // Decrypt
    int decrypted_text = decrypt(ciphertext, d, n);
    printf("Decrypted text: %d\n", decrypted_text);

    return 0;
}
---------------------ECC----------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct {
    int x;
    int y;
} Point;

void encrypt(Point plaintext, Point publicKey, Point* c1, Point* c2, Point G, int p, int* k) {
    *k = rand() % (p - 1) + 1; // Choose a random k from [1, p-1]
    // For simplicity, simulate ECC encryption
    c1->x = (G.x * (*k)) % p; // c1 = kG, simplified
    c1->y = (G.y * (*k)) % p;
    c2->x = (plaintext.x + publicKey.x * (*k)) % p; // c2 = M + kPB, simplified
    c2->y = (plaintext.y + publicKey.y * (*k)) % p;
}

Point decrypt(Point c1, Point c2, int privateKey, int p) {
    Point decrypted;
    int s = (c1.x * privateKey) % p; // Simulate s = c1 * d
    decrypted.x = (c2.x - s + p) % p; // Reverse the encryption
    decrypted.y = (c2.y - s + p) % p;
    return decrypted;
}

int main() {
    srand(time(NULL));
    Point G, publicKey, plaintext, c1, c2, decrypted;
    int p, privateKey, k;

    printf("Enter prime p: ");
    scanf("%d", &p);
    printf("Enter base point G (x, y): ");
    scanf("%d %d", &G.x, &G.y);
    printf("Enter plaintext point (x, y): ");
    scanf("%d %d", &plaintext.x, &plaintext.y);

    privateKey = rand() % (p - 1) + 1; // Generate private key
    // Simulate Public key = privateKey * G, simplified for this example
    publicKey.x = (G.x * privateKey) % p;
    publicKey.y = (G.y * privateKey) % p;

    printf("Generated private key: %d\n", privateKey);
    printf("Generated public key: (%d, %d)\n", publicKey.x, publicKey.y);

    encrypt(plaintext, publicKey, &c1, &c2, G, p, &k);
    printf("Encrypted:\n c1 = (%d, %d)\n c2 = (%d, %d)\n", c1.x, c1.y, c2.x, c2.y);

    clock_t start = clock();
    decrypted = decrypt(c1, c2, privateKey, p);
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;

    printf("Decrypted text: (%d, %d)\n", decrypted.x, decrypted.y);
    printf("Decryption time: %f seconds\n", time_spent);

    return 0;
}


-----------------------------SDES---------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define PLAINTEXT_LENGTH 8 
#define KEY_LENGTH 10      
#define SUBKEY_LENGTH 8    

void generateSubkeys(const char* key, char* subKey1, char* subKey2) {
    strncpy(subKey1, key, SUBKEY_LENGTH);
    subKey1[SUBKEY_LENGTH] = '\0';
    strncpy(subKey2, key + 2, SUBKEY_LENGTH);
    subKey2[SUBKEY_LENGTH] = '\0';
}

void encrypt(const char* plaintext, const char* subKey1, const char* subKey2, char* ciphertext) {
    for (int i = 0; i < PLAINTEXT_LENGTH; i++) {
        ciphertext[i] = ((plaintext[i] - '0') ^ (subKey1[i % SUBKEY_LENGTH] - '0') ^ (subKey2[i % SUBKEY_LENGTH] - '0')) + '0';
    }
    ciphertext[PLAINTEXT_LENGTH] = '\0';
}

void decrypt(const char* ciphertext, const char* subKey1, const char* subKey2, char* plaintext) {
    encrypt(ciphertext, subKey1, subKey2, plaintext);
}

int main() {
    char plaintext[PLAINTEXT_LENGTH + 1], ciphertext[PLAINTEXT_LENGTH + 1];
    char key[KEY_LENGTH + 1], subKey1[SUBKEY_LENGTH + 1], subKey2[SUBKEY_LENGTH + 1];
    clock_t start, end;
    double cpu_time_used;

    printf("Enter plaintext (8 bits): ");
    scanf("%8s", plaintext);
    printf("Enter key (10 bits): ");
    scanf("%10s", key);

    generateSubkeys(key, subKey1, subKey2);

    start = clock();
    encrypt(plaintext, subKey1, subKey2, ciphertext);
    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Encrypted text: %s\n", ciphertext);
    printf("Encryption took %f seconds.\n", cpu_time_used);

    start = clock();
    decrypt(ciphertext, subKey1, subKey2, plaintext);
    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Decrypted text: %s\n", plaintext);
    printf("Decryption took %f seconds.\n", cpu_time_used);

    return 0;
}

---------------------------------AES--------
def pad(x, y):
    while len(x) > y:
        x = x[:-1]
    while len(x) < y:
        x += ' '
    return x

def hexify(x):
    return [format(ord(i), '02x') for i in x]

def add_round_key(x, y):
    new_state = []
    for i in range(len(y)):
        new_state.append(format(int(x[i], 16) ^ int(y[i], 16), '02x'))
    return new_state

def shift_rows(x):
    x1 = x[:4]
    for j in range(4, 16, 4):
        i = j // 4
        x1 += x[j + i:j + 4] + x[j:j + i]
    return x1

def mix_cols(x):
    x1 = [int(i, 16) for i in x]
    c_mat = [
        2, 3, 1, 1,
        1, 2, 3, 1,
        1, 1, 2, 3,
        3, 1, 1, 2
    ]
    ar = [0] * 16

    for i in range(4):
        for j in range(4):
            for k in range(4):
                ar[i * 4 + j] ^= x1[i * 4 + k] * c_mat[k * 4 + j]

    ar = [format(i % 256, '02x') for i in ar]
    return ar

def aes(input_str, key_str):
    pt = hexify(pad(input_str, 16))
    key = hexify(pad(key_str, 16))
    ct = add_round_key(pt, key)

    for _ in range(9):
        ct = shift_rows(ct)
        ct = mix_cols(ct)
        ct = add_round_key(ct, key)

    # Last round without MixCols
    ct = shift_rows(ct)
    ct = add_round_key(ct, key)

    return ''.join(i for i in ct)

# Example usage
input_text = input("Enter Plain Text: ")
key_text = input("Enter Key: ")
cipher_text = aes(input_text, key_text)
print("Cipher Text:", cipher_text)

-----------------------------DEs---------
# Python3 code for the above approach

# Hexadecimal to binary conversion


def hex2bin(s):
	mp = {'0': "0000",
		'1': "0001",
		'2': "0010",
		'3': "0011",
		'4': "0100",
		'5': "0101",
		'6': "0110",
		'7': "0111",
		'8': "1000",
		'9': "1001",
		'A': "1010",
		'B': "1011",
		'C': "1100",
		'D': "1101",
		'E': "1110",
		'F': "1111"}
	bin = ""
	for i in range(len(s)):
		bin = bin + mp[s[i]]
	return bin

# Binary to hexadecimal conversion


def bin2hex(s):
	mp = {"0000": '0',
		"0001": '1',
		"0010": '2',
		"0011": '3',
		"0100": '4',
		"0101": '5',
		"0110": '6',
		"0111": '7',
		"1000": '8',
		"1001": '9',
		"1010": 'A',
		"1011": 'B',
		"1100": 'C',
		"1101": 'D',
		"1110": 'E',
		"1111": 'F'}
	hex = ""
	for i in range(0, len(s), 4):
		ch = ""
		ch = ch + s[i]
		ch = ch + s[i + 1]
		ch = ch + s[i + 2]
		ch = ch + s[i + 3]
		hex = hex + mp[ch]

	return hex

# Binary to decimal conversion


def bin2dec(binary):

	binary1 = binary
	decimal, i, n = 0, 0, 0
	while(binary != 0):
		dec = binary % 10
		decimal = decimal + dec * pow(2, i)
		binary = binary//10
		i += 1
	return decimal

# Decimal to binary conversion


def dec2bin(num):
	res = bin(num).replace("0b", "")
	if(len(res) % 4 != 0):
		div = len(res) / 4
		div = int(div)
		counter = (4 * (div + 1)) - len(res)
		for i in range(0, counter):
			res = '0' + res
	return res

# Permute function to rearrange the bits


def permute(k, arr, n):
	permutation = ""
	for i in range(0, n):
		permutation = permutation + k[arr[i] - 1]
	return permutation

# shifting the bits towards left by nth shifts


def shift_left(k, nth_shifts):
	s = ""
	for i in range(nth_shifts):
		for j in range(1, len(k)):
			s = s + k[j]
		s = s + k[0]
		k = s
		s = ""
	return k

# calculating xow of two strings of binary number a and b


def xor(a, b):
	ans = ""
	for i in range(len(a)):
		if a[i] == b[i]:
			ans = ans + "0"
		else:
			ans = ans + "1"
	return ans


# Table of Position of 64 bits at initial level: Initial Permutation Table
initial_perm = [58, 50, 42, 34, 26, 18, 10, 2,
				60, 52, 44, 36, 28, 20, 12, 4,
				62, 54, 46, 38, 30, 22, 14, 6,
				64, 56, 48, 40, 32, 24, 16, 8,
				57, 49, 41, 33, 25, 17, 9, 1,
				59, 51, 43, 35, 27, 19, 11, 3,
				61, 53, 45, 37, 29, 21, 13, 5,
				63, 55, 47, 39, 31, 23, 15, 7]

# Expansion D-box Table
exp_d = [32, 1, 2, 3, 4, 5, 4, 5,
		6, 7, 8, 9, 8, 9, 10, 11,
		12, 13, 12, 13, 14, 15, 16, 17,
		16, 17, 18, 19, 20, 21, 20, 21,
		22, 23, 24, 25, 24, 25, 26, 27,
		28, 29, 28, 29, 30, 31, 32, 1]

# Straight Permutation Table
per = [16, 7, 20, 21,
	29, 12, 28, 17,
	1, 15, 23, 26,
	5, 18, 31, 10,
	2, 8, 24, 14,
	32, 27, 3, 9,
	19, 13, 30, 6,
	22, 11, 4, 25]

# S-box Table
sbox = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
		[0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
		[4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
		[15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],

		[[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
		[3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
		[0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
		[13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]],

		[[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
		[13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
		[13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
		[1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]],

		[[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
		[13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
		[10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
		[3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]],

		[[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
		[14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
		[4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
		[11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]],

		[[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
		[10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
		[9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
		[4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]],

		[[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
		[13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
		[1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
		[6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]],

		[[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
		[1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
		[7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
		[2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]

# Final Permutation Table
final_perm = [40, 8, 48, 16, 56, 24, 64, 32,
			39, 7, 47, 15, 55, 23, 63, 31,
			38, 6, 46, 14, 54, 22, 62, 30,
			37, 5, 45, 13, 53, 21, 61, 29,
			36, 4, 44, 12, 52, 20, 60, 28,
			35, 3, 43, 11, 51, 19, 59, 27,
			34, 2, 42, 10, 50, 18, 58, 26,
			33, 1, 41, 9, 49, 17, 57, 25]


def encrypt(pt, rkb, rk):
	pt = hex2bin(pt)

	# Initial Permutation
	pt = permute(pt, initial_perm, 64)
	print("After initial permutation", bin2hex(pt))

	# Splitting
	left = pt[0:32]
	right = pt[32:64]
	for i in range(0, 16):
		# Expansion D-box: Expanding the 32 bits data into 48 bits
		right_expanded = permute(right, exp_d, 48)

		# XOR RoundKey[i] and right_expanded
		xor_x = xor(right_expanded, rkb[i])

		# S-boxex: substituting the value from s-box table by calculating row and column
		sbox_str = ""
		for j in range(0, 8):
			row = bin2dec(int(xor_x[j * 6] + xor_x[j * 6 + 5]))
			col = bin2dec(
				int(xor_x[j * 6 + 1] + xor_x[j * 6 + 2] + xor_x[j * 6 + 3] + xor_x[j * 6 + 4]))
			val = sbox[j][row][col]
			sbox_str = sbox_str + dec2bin(val)

		# Straight D-box: After substituting rearranging the bits
		sbox_str = permute(sbox_str, per, 32)

		# XOR left and sbox_str
		result = xor(left, sbox_str)
		left = result

		# Swapper
		if(i != 15):
			left, right = right, left
		print("Round ", i + 1, " ", bin2hex(left),
			" ", bin2hex(right), " ", rk[i])

	# Combination
	combine = left + right

	# Final permutation: final rearranging of bits to get cipher text
	cipher_text = permute(combine, final_perm, 64)
	return cipher_text


#pt = "123456ABCD132536"
#key = "AABB09182736CCDD"

pt = input("enter plain text: ")
key = input("enter key: ")

# Key generation
# --hex to binary
key = hex2bin(key)

# --parity bit drop table
keyp = [57, 49, 41, 33, 25, 17, 9,
		1, 58, 50, 42, 34, 26, 18,
		10, 2, 59, 51, 43, 35, 27,
		19, 11, 3, 60, 52, 44, 36,
		63, 55, 47, 39, 31, 23, 15,
		7, 62, 54, 46, 38, 30, 22,
		14, 6, 61, 53, 45, 37, 29,
		21, 13, 5, 28, 20, 12, 4]

# getting 56 bit key from 64 bit using the parity bits
key = permute(key, keyp, 56)

# Number of bit shifts
shift_table = [1, 1, 2, 2,
			2, 2, 2, 2,
			1, 2, 2, 2,
			2, 2, 2, 1]

# Key- Compression Table : Compression of key from 56 bits to 48 bits
key_comp = [14, 17, 11, 24, 1, 5,
			3, 28, 15, 6, 21, 10,
			23, 19, 12, 4, 26, 8,
			16, 7, 27, 20, 13, 2,
			41, 52, 31, 37, 47, 55,
			30, 40, 51, 45, 33, 48,
			44, 49, 39, 56, 34, 53,
			46, 42, 50, 36, 29, 32]

# Splitting
left = key[0:28] # rkb for RoundKeys in binary
right = key[28:56] # rk for RoundKeys in hexadecimal

rkb = []
rk = []
for i in range(0, 16):
	# Shifting the bits by nth shifts by checking from shift table
	left = shift_left(left, shift_table[i])
	right = shift_left(right, shift_table[i])

	# Combination of left and right string
	combine_str = left + right

	# Compression of key from 56 to 48 bits
	round_key = permute(combine_str, key_comp, 48)

	rkb.append(round_key)
	rk.append(bin2hex(round_key))

print("Encryption")
cipher_text = bin2hex(encrypt(pt, rkb, rk))
print("Cipher Text : ", cipher_text)

print("Decryption")
rkb_rev = rkb[::-1]
rk_rev = rk[::-1]
text = bin2hex(encrypt(cipher_text, rkb_rev, rk_rev))
print("Plain Text : ", text)

# This code is contributed by Aditya Jain

-----------------------------